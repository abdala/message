service: message
app: message-app
org: abdalacerqueira

custom:
  MessageTable: 'message'
  MessageTableIndex: 'Username'
  Template: 'message'

plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs10.x
  profile: research

functions:

  createMessage:
    handler: api/createMessage.handler
    environment:
      MESSAGE_TOPIC_ARN: !Ref SNSTopicMessagereceived
    iamRoleStatements:
      - Effect: 'Allow'
        Action: ['sns:Publish']
        Resource: [!Ref SNSTopicMessagereceived]
    events:
      - http:
          path: messages
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  retrieveMessages:
    handler: api/retrieveMessages.handler
    environment:
      MESSAGE_TABLE: ${self:custom.MessageTable}
      MESSAGE_TABLE_INDEX: ${self:custom.MessageTableIndex}
    iamRoleStatements:
      - Effect: Allow
        Action: ['dynamodb:Query']
        Resource:
         - !GetAtt MessageTable.Arn
         - !Join
            - ''
            - - !GetAtt MessageTable.Arn
              - '/index/'
              - ${self:custom.MessageTableIndex}
    events:
      - http:
          path: messages
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  sendSms:
    handler: subscribers/sendSMS.handler
    iamRoleStatements:
      - Effect: 'Allow'
        Action: ['sns:Publish']
        Resource: '*'
    events:
      - sns:
          topicName: message-received
          displayName: 'Message received'
          filterPolicy:
            type:
              - sms

  sendEmail:
    handler: subscribers/sendEmail.handler
    environment:
      MESSAGE_TEMPLATE: ${self:custom.Template}
    iamRoleStatements:
      - Effect: 'Allow'
        Action: ['ses:SendEmail', 'ses:SendRawEmail', 'ses:SendTemplatedEmail']
        Resource: '*'
    events:
      - sns:
          topicName: message-received
          displayName: 'Message received'
          filterPolicy:
            type:
              - email

  saveMessage:
    handler: subscribers/saveMessage.handler
    environment:
      MESSAGE_TABLE: ${self:custom.MessageTable}
    iamRoleStatements:
      - Effect: Allow
        Action: ['dynamodb:PutItem']
        Resource: [!GetAtt MessageTable.Arn]
    events:
      - sns: message-received

resources:
  Resources:

    EmailMessageTemplate:
      Type: AWS::SES::Template
      Properties:
        Template:
          HtmlPart: '<strong>Here is your new message:</strong> {{text}}'
          SubjectPart: 'New message for you'
          TemplateName: ${self:custom.Template}
          TextPart: 'Here is your new message: {{text}}'

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: 'message-users'
        UsernameAttributes: ['email']

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref UserPool
        ClientName: 'message-client'
        GenerateSecret: false

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId: !Ref ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !GetAtt UserPool.Arn

    MessageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.MessageTable}
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "to"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.MessageTableIndex}
            KeySchema:
              - AttributeName: to
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
